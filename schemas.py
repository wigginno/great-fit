from pydantic import BaseModel, ConfigDict
from typing import Optional


# --- User Profile Schemas ---
class UserProfileBase(BaseModel):
    profile_data: dict  # Simple dict for PoC profile


class UserProfileCreate(UserProfileBase):
    pass


class UserProfile(UserProfileBase):
    id: int
    owner_email: str

    model_config = ConfigDict(from_attributes=True)


# --- User Schemas ---
class UserBase(BaseModel):
    email: str


class UserCreate(UserBase):
    pass


class User(UserBase):
    id: int
    profile: UserProfile | None = None  # Assuming profile is optional or loaded later

    model_config = ConfigDict(from_attributes=True)


# --- Form Field Info (from Frontend/Tampermonkey) ---
class FormFieldInfo(BaseModel):
    field_id: str  # Unique ID generated by the frontend script
    label: Optional[str] = None  # Text from associated <label> tag
    type: Optional[str] = None  # Input type (e.g., 'text', 'email', 'tel')
    name: Optional[str] = None  # Input 'name' attribute
    placeholder: Optional[str] = None  # Input 'placeholder' attribute


# --- Job Schemas ---
class JobDescriptionInput(BaseModel):
    description: str


class ExtractedJobInfo(BaseModel):
    title: str
    company: str


class JobBase(BaseModel):
    title: str
    company: str
    description: str


class JobCreate(JobBase):
    pass


class Job(JobBase):
    id: int
    user_id: int
    ranking_score: float | None = None
    ranking_explanation: str | None = None

    model_config = ConfigDict(from_attributes=True)
